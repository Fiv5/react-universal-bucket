/* eslint react/no-multi-comp:0*/
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactAddonsTestUtils = require('react-addons-test-utils');

var _reactAddonsTestUtils2 = _interopRequireDefault(_reactAddonsTestUtils);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _reducer = require('../reducer');

var _reducer2 = _interopRequireDefault(_reducer);

var _createReduxForm = require('../createReduxForm');

var _createReduxForm2 = _interopRequireDefault(_createReduxForm);

describe('createReduxForm', function () {
  var reduxForm = _createReduxForm2['default'](false, _react2['default']);
  var makeStore = function makeStore() {
    return _redux.createStore(_redux.combineReducers({
      form: _reducer2['default']
    }));
  };

  it('should return a decorator function', function () {
    _expect2['default'](reduxForm).toBeA('function');
  });

  var Form = (function (_Component) {
    _inherits(Form, _Component);

    function Form() {
      _classCallCheck(this, Form);

      _Component.apply(this, arguments);
    }

    Form.prototype.render = function render() {
      return _react2['default'].createElement('div', null);
    };

    return Form;
  })(_react.Component);

  var expectField = function expectField(_ref) {
    var field = _ref.field;
    var name = _ref.name;
    var value = _ref.value;
    var valid = _ref.valid;
    var dirty = _ref.dirty;
    var error = _ref.error;
    var touched = _ref.touched;
    var visited = _ref.visited;
    var readonly = _ref.readonly;

    _expect2['default'](field).toBeA('object');
    _expect2['default'](field.name).toBe(name);
    _expect2['default'](field.value).toBe(value);
    if (readonly) {
      _expect2['default'](field.onBlur).toNotExist();
      _expect2['default'](field.onChange).toNotExist();
      _expect2['default'](field.onDragStart).toNotExist();
      _expect2['default'](field.onDrop).toNotExist();
      _expect2['default'](field.onFocus).toNotExist();
      _expect2['default'](field.onUpdate).toNotExist();
    } else {
      _expect2['default'](field.onBlur).toBeA('function');
      _expect2['default'](field.onChange).toBeA('function');
      _expect2['default'](field.onDragStart).toBeA('function');
      _expect2['default'](field.onDrop).toBeA('function');
      _expect2['default'](field.onFocus).toBeA('function');
      _expect2['default'](field.onUpdate).toBeA('function');
    }
    _expect2['default'](field.valid).toBe(valid);
    _expect2['default'](field.invalid).toBe(!valid);
    _expect2['default'](field.dirty).toBe(dirty);
    _expect2['default'](field.pristine).toBe(!dirty);
    _expect2['default'](field.error).toBe(error);
    _expect2['default'](field.touched).toBe(touched);
    _expect2['default'](field.visited).toBe(visited);
  };

  it('should render without error', function () {
    var store = makeStore();
    _expect2['default'](function () {
      var Decorated = reduxForm({
        form: 'testForm',
        fields: ['foo', 'bar']
      })(Form);
      _reactAddonsTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(
        _reactRedux.Provider,
        { store: store },
        _react2['default'].createElement(Decorated, null)
      ));
    }).toNotThrow();
  });

  it('should pass fields as props', function () {
    var store = makeStore();
    var Decorated = reduxForm({
      form: 'testForm',
      fields: ['foo', 'bar']
    })(Form);
    var dom = _reactAddonsTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, null)
    ));
    var stub = _reactAddonsTestUtils2['default'].findRenderedComponentWithType(dom, Form);
    _expect2['default'](stub.props.fields).toBeA('object');
    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: undefined,
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
    expectField({
      field: stub.props.fields.bar,
      name: 'bar',
      value: undefined,
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
  });

  it('should initialize field values', function () {
    var store = makeStore();
    var Decorated = reduxForm({
      form: 'testForm',
      fields: ['foo', 'bar']
    })(Form);
    var dom = _reactAddonsTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, { initialValues: { foo: 'fooValue', bar: 'barValue' } })
    ));
    var stub = _reactAddonsTestUtils2['default'].findRenderedComponentWithType(dom, Form);
    _expect2['default'](stub.props.fields).toBeA('object');
    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: 'fooValue',
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
    expectField({
      field: stub.props.fields.bar,
      name: 'bar',
      value: 'barValue',
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
  });

  it('should set value and touch field on blur', function () {
    var store = makeStore();
    var form = 'testForm';
    var Decorated = reduxForm({
      form: form,
      fields: ['foo', 'bar']
    })(Form);
    var dom = _reactAddonsTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, null)
    ));
    var stub = _reactAddonsTestUtils2['default'].findRenderedComponentWithType(dom, Form);

    stub.props.fields.foo.onBlur('fooValue');

    _expect2['default'](stub.props.fields).toBeA('object');
    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: 'fooValue',
      valid: true,
      dirty: true,
      error: undefined,
      touched: true,
      visited: false,
      readonly: false
    });
    expectField({
      field: stub.props.fields.bar,
      name: 'bar',
      value: undefined,
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
  });

  it('should set value and NOT touch field on blur if touchOnBlur is disabled', function () {
    var store = makeStore();
    var form = 'testForm';
    var Decorated = reduxForm({
      form: form,
      fields: ['foo', 'bar'],
      touchOnBlur: false
    })(Form);
    var dom = _reactAddonsTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, null)
    ));
    var stub = _reactAddonsTestUtils2['default'].findRenderedComponentWithType(dom, Form);

    stub.props.fields.foo.onBlur('fooValue');

    _expect2['default'](stub.props.fields).toBeA('object');
    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: 'fooValue',
      valid: true,
      dirty: true,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
    expectField({
      field: stub.props.fields.bar,
      name: 'bar',
      value: undefined,
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
  });

  it('should set value and NOT touch field on change', function () {
    var store = makeStore();
    var form = 'testForm';
    var Decorated = reduxForm({
      form: form,
      fields: ['foo', 'bar']
    })(Form);
    var dom = _reactAddonsTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, null)
    ));
    var stub = _reactAddonsTestUtils2['default'].findRenderedComponentWithType(dom, Form);

    stub.props.fields.foo.onChange('fooValue');

    _expect2['default'](stub.props.fields).toBeA('object');
    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: 'fooValue',
      valid: true,
      dirty: true,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
    expectField({
      field: stub.props.fields.bar,
      name: 'bar',
      value: undefined,
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
  });

  it('should set value and touch field on change if touchOnChange is enabled', function () {
    var store = makeStore();
    var form = 'testForm';
    var Decorated = reduxForm({
      form: form,
      fields: ['foo', 'bar'],
      touchOnChange: true
    })(Form);
    var dom = _reactAddonsTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, null)
    ));
    var stub = _reactAddonsTestUtils2['default'].findRenderedComponentWithType(dom, Form);

    stub.props.fields.foo.onChange('fooValue');

    _expect2['default'](stub.props.fields).toBeA('object');
    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: 'fooValue',
      valid: true,
      dirty: true,
      error: undefined,
      touched: true,
      visited: false,
      readonly: false
    });
    expectField({
      field: stub.props.fields.bar,
      name: 'bar',
      value: undefined,
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
  });

  it('should set visited field on focus', function () {
    var store = makeStore();
    var form = 'testForm';
    var Decorated = reduxForm({
      form: form,
      fields: ['foo', 'bar']
    })(Form);
    var dom = _reactAddonsTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, null)
    ));
    var stub = _reactAddonsTestUtils2['default'].findRenderedComponentWithType(dom, Form);

    _expect2['default'](stub.props.active).toBe(undefined);

    stub.props.fields.foo.onFocus();

    _expect2['default'](stub.props.active).toBe('foo');

    _expect2['default'](stub.props.fields).toBeA('object');
    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: undefined,
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: true,
      readonly: false
    });
    expectField({
      field: stub.props.fields.bar,
      name: 'bar',
      value: undefined,
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
  });

  it('should set dirty when field changes', function () {
    var store = makeStore();
    var form = 'testForm';
    var Decorated = reduxForm({
      form: form,
      fields: ['foo', 'bar']
    })(Form);
    var dom = _reactAddonsTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, { initialValues: { foo: 'fooValue', bar: 'barValue' } })
    ));
    var stub = _reactAddonsTestUtils2['default'].findRenderedComponentWithType(dom, Form);

    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: 'fooValue',
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });

    stub.props.fields.foo.onChange('fooValue!');

    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: 'fooValue!',
      valid: true,
      dirty: true,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });
  });

  it('should trigger sync error on change that invalidates value', function () {
    var store = makeStore();
    var form = 'testForm';
    var Decorated = reduxForm({
      form: form,
      fields: ['foo', 'bar'],
      validate: function validate(values) {
        var errors = {};
        if (values.foo && values.foo.length > 8) {
          errors.foo = 'Too long';
        }
        if (!values.bar) {
          errors.bar = 'Required';
        }
        return errors;
      }
    })(Form);
    var dom = _reactAddonsTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, { initialValues: { foo: 'fooValue', bar: 'barValue' } })
    ));
    var stub = _reactAddonsTestUtils2['default'].findRenderedComponentWithType(dom, Form);

    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: 'fooValue',
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });

    expectField({
      field: stub.props.fields.bar,
      name: 'bar',
      value: 'barValue',
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: false
    });

    stub.props.fields.foo.onChange('fooValue!');

    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: 'fooValue!',
      valid: false,
      dirty: true,
      error: 'Too long',
      touched: false,
      visited: false,
      readonly: false
    });

    stub.props.fields.bar.onChange('');

    expectField({
      field: stub.props.fields.bar,
      name: 'bar',
      value: '',
      valid: false,
      dirty: true,
      error: 'Required',
      touched: false,
      visited: false,
      readonly: false
    });
  });

  it('should call destroy on unmount', function () {
    var store = makeStore();
    var form = 'testForm';
    var Decorated = reduxForm({
      form: form,
      fields: ['foo', 'bar']
    })(Form);

    var div = document.createElement('div');
    _reactDom2['default'].render(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, { initialValues: { foo: 'fooValue', bar: 'barValue' } })
    ), div);
    var before = store.getState();
    _expect2['default'](before.form).toBeA('object');
    _expect2['default'](before.form[form]).toBeA('object');
    _expect2['default'](before.form[form].foo).toBeA('object');
    _expect2['default'](before.form[form].bar).toBeA('object');

    _reactDom2['default'].unmountComponentAtNode(div);

    var after = store.getState();
    _expect2['default'](after.form).toBeA('object');
    _expect2['default'](after.form[form]).toNotExist();
  });

  it('should NOT call destroy on unmount if destroyOnUnmount is disabled', function () {
    var store = makeStore();
    var form = 'testForm';
    var Decorated = reduxForm({
      form: form,
      fields: ['foo', 'bar'],
      destroyOnUnmount: false
    })(Form);

    var div = document.createElement('div');
    _reactDom2['default'].render(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, { initialValues: { foo: 'fooValue', bar: 'barValue' } })
    ), div);
    var before = store.getState();
    _expect2['default'](before.form).toBeA('object');
    _expect2['default'](before.form[form]).toBeA('object');
    _expect2['default'](before.form[form].foo).toBeA('object');
    _expect2['default'](before.form[form].bar).toBeA('object');

    _reactDom2['default'].unmountComponentAtNode(div);

    var after = store.getState();
    _expect2['default'](after.form).toBeA('object');
    _expect2['default'](after.form[form]).toBeA('object');
    _expect2['default'](after.form[form].foo).toBeA('object');
    _expect2['default'](after.form[form].bar).toBeA('object');
  });

  it('should hoist statics', function () {
    var FormWithStatics = (function (_Component2) {
      _inherits(FormWithStatics, _Component2);

      function FormWithStatics() {
        _classCallCheck(this, FormWithStatics);

        _Component2.apply(this, arguments);
      }

      FormWithStatics.prototype.render = function render() {
        return _react2['default'].createElement('div', null);
      };

      return FormWithStatics;
    })(_react.Component);

    FormWithStatics.someStatic1 = 'cat';
    FormWithStatics.someStatic2 = 42;

    var Decorated = reduxForm({
      form: 'testForm',
      fields: ['foo', 'bar']
    })(FormWithStatics);

    _expect2['default'](Decorated.someStatic1).toBe('cat');
    _expect2['default'](Decorated.someStatic2).toBe(42);
  });

  it('should not provide mutators when readonly', function () {
    var store = makeStore();
    var form = 'testForm';
    var Decorated = reduxForm({
      form: form,
      fields: ['foo', 'bar'],
      readonly: true
    })(Form);
    var dom = _reactAddonsTestUtils2['default'].renderIntoDocument(_react2['default'].createElement(
      _reactRedux.Provider,
      { store: store },
      _react2['default'].createElement(Decorated, null)
    ));
    var stub = _reactAddonsTestUtils2['default'].findRenderedComponentWithType(dom, Form);

    expectField({
      field: stub.props.fields.foo,
      name: 'foo',
      value: undefined,
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: true
    });

    expectField({
      field: stub.props.fields.bar,
      name: 'bar',
      value: undefined,
      valid: true,
      dirty: false,
      error: undefined,
      touched: false,
      visited: false,
      readonly: true
    });
  });
});