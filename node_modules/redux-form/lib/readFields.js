'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _eventsCreateOnBlur = require('./events/createOnBlur');

var _eventsCreateOnBlur2 = _interopRequireDefault(_eventsCreateOnBlur);

var _eventsCreateOnChange = require('./events/createOnChange');

var _eventsCreateOnChange2 = _interopRequireDefault(_eventsCreateOnChange);

var _eventsCreateOnDragStart = require('./events/createOnDragStart');

var _eventsCreateOnDragStart2 = _interopRequireDefault(_eventsCreateOnDragStart);

var _eventsCreateOnDrop = require('./events/createOnDrop');

var _eventsCreateOnDrop2 = _interopRequireDefault(_eventsCreateOnDrop);

var _eventsCreateOnFocus = require('./events/createOnFocus');

var _eventsCreateOnFocus2 = _interopRequireDefault(_eventsCreateOnFocus);

var _isPristine = require('./isPristine');

var _isPristine2 = _interopRequireDefault(_isPristine);

var _isValid = require('./isValid');

var _isValid2 = _interopRequireDefault(_isValid);

var _getValues = require('./getValues');

var _getValues2 = _interopRequireDefault(_getValues);

var _silencePromise = require('./silencePromise');

var _silencePromise2 = _interopRequireDefault(_silencePromise);

/**
 * Reads props and generates (or updates) field structure
 */
var readFields = function readFields(props, myFields, asyncValidate, isReactNative) {
  var asyncBlurFields = props.asyncBlurFields;
  var blur = props.blur;
  var change = props.change;
  var fields = props.fields;
  var focus = props.focus;
  var form = props.form;
  var initialValues = props.initialValues;
  var readonly = props.readonly;
  var validate = props.validate;

  var values = _getValues2['default'](fields, form);
  var syncErrors = validate(values, props);
  var errors = {};
  var formError = syncErrors._error || form._error;
  var allValid = !formError;
  var allPristine = true;
  var fieldObjects = fields.reduce(function (accumulator, name) {
    var field = myFields[name] || {};
    var diff = {};

    // create field if it does not exist
    if (field.name !== name) {
      var onChange = _eventsCreateOnChange2['default'](name, change, isReactNative);
      var initialValue = initialValues && initialValues[name];
      field.name = name;
      field.defaultChecked = initialValue === true;
      field.defaultValue = initialValue;
      if (!readonly) {
        field.onBlur = _eventsCreateOnBlur2['default'](name, blur, isReactNative, ~asyncBlurFields.indexOf(name) && function (blurName, blurValue) {
          return _silencePromise2['default'](asyncValidate(blurName, blurValue));
        });
        field.onChange = onChange;
        field.onDragStart = _eventsCreateOnDragStart2['default'](name, function () {
          return field.value;
        });
        field.onDrop = _eventsCreateOnDrop2['default'](name, change);
        field.onFocus = _eventsCreateOnFocus2['default'](name, focus);
        field.onUpdate = onChange; // alias to support belle. https://github.com/nikgraf/belle/issues/58
      }
      field.valid = true;
      field.invalid = false;
    }

    // update field value
    var formField = form[name] || {};
    if (field.value !== formField.value) {
      diff.value = formField.value;
      diff.checked = typeof formField.value === 'boolean' ? formField.value : undefined;
    }

    // update dirty/pristine
    var pristine = _isPristine2['default'](formField.value, formField.initial);
    if (field.pristine !== pristine) {
      diff.dirty = !pristine;
      diff.pristine = pristine;
    }

    // update field error
    var error = syncErrors[name] || formField.submitError || formField.asyncError;
    if (error !== field.error) {
      diff.error = error;
    }
    var valid = _isValid2['default'](error);
    if (field.valid !== valid) {
      diff.invalid = !valid;
      diff.valid = valid;
    }
    if (error) {
      errors[name] = error;
    }

    var active = form._active === name;
    if (active !== field.active) {
      diff.active = active;
    }
    var touched = !!formField.touched;
    if (touched !== field.touched) {
      diff.touched = touched;
    }
    var visited = !!formField.visited;
    if (visited !== field.visited) {
      diff.visited = visited;
    }

    var result = Object.keys(diff).length ? _extends({}, field, diff) : field;

    if (result.invalid) {
      allValid = false;
    }
    if (result.dirty) {
      allPristine = false;
    }
    accumulator[name] = result;
    return accumulator;
  }, {});
  Object.defineProperty(fieldObjects, '_meta', {
    value: {
      allPristine: allPristine,
      allValid: allValid,
      values: values,
      errors: errors,
      formError: formError
    }
  });
  return fieldObjects;
};
exports['default'] = readFields;
module.exports = exports['default'];