'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reduxDevtoolsThemes = require('redux-devtools-themes');

var themes = _interopRequireWildcard(_reduxDevtoolsThemes);

var _reduxDevtools = require('redux-devtools');

var _devui = require('devui');

var _reducers = require('./reducers');

var _reducers2 = _interopRequireDefault(_reducers);

var _SliderButton = require('./SliderButton');

var _SliderButton2 = _interopRequireDefault(_SliderButton);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var reset = _reduxDevtools.ActionCreators.reset,
    jumpToState = _reduxDevtools.ActionCreators.jumpToState;

var SliderMonitor = function (_ref) {
  _inherits(SliderMonitor, _ref);

  function SliderMonitor() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, SliderMonitor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = SliderMonitor.__proto__ || Object.getPrototypeOf(SliderMonitor)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
      timer: undefined,
      replaySpeed: '1x'
    }, _this.setUpTheme = function () {
      var theme = void 0;
      if (typeof _this.props.theme === 'string') {
        if (typeof themes[_this.props.theme] !== 'undefined') {
          theme = themes[_this.props.theme];
        } else {
          theme = themes.nicinabox;
        }
      } else {
        theme = _this.props.theme;
      }

      return theme;
    }, _this.handleReset = function () {
      _this.props.dispatch(reset());
    }, _this.handleKeyPress = function (event) {
      if (!_this.props.keyboardEnabled) {
        return null;
      }
      if (event.ctrlKey && event.keyCode === 74) {
        // ctrl+j
        event.preventDefault();

        if (_this.state.timer) {
          return _this.pauseReplay();
        }

        if (_this.state.replaySpeed === 'Live') {
          _this.startRealtimeReplay();
        } else {
          _this.startReplay();
        }
      } else if (event.ctrlKey && event.keyCode === 219) {
        // ctrl+[
        event.preventDefault();
        _this.stepLeft();
      } else if (event.ctrlKey && event.keyCode === 221) {
        // ctrl+]
        event.preventDefault();
        _this.stepRight();
      }
      return null;
    }, _this.handleSliderChange = function (value) {
      if (_this.state.timer) {
        _this.pauseReplay();
      }

      _this.props.dispatch(jumpToState(value));
    }, _this.startReplay = function () {
      var _this$props = _this.props,
          computedStates = _this$props.computedStates,
          currentStateIndex = _this$props.currentStateIndex,
          dispatch = _this$props.dispatch;


      if (computedStates.length < 2) {
        return;
      }
      var speed = _this.state.replaySpeed === '1x' ? 500 : 200;

      var stateIndex = void 0;
      if (currentStateIndex === computedStates.length - 1) {
        dispatch(jumpToState(0));
        stateIndex = 0;
      } else if (currentStateIndex === computedStates.length - 2) {
        dispatch(jumpToState(currentStateIndex + 1));
        return;
      } else {
        stateIndex = currentStateIndex + 1;
        dispatch(jumpToState(currentStateIndex + 1));
      }

      var counter = stateIndex;
      var timer = setInterval(function () {
        if (counter + 1 <= computedStates.length - 1) {
          dispatch(jumpToState(counter + 1));
        }
        counter += 1;

        if (counter >= computedStates.length - 1) {
          clearInterval(_this.state.timer);
          _this.setState({
            timer: undefined
          });
        }
      }, speed);

      _this.setState({ timer: timer });
    }, _this.startRealtimeReplay = function () {
      if (_this.props.computedStates.length < 2) {
        return;
      }

      if (_this.props.currentStateIndex === _this.props.computedStates.length - 1) {
        _this.props.dispatch(jumpToState(0));

        _this.loop(0);
      } else {
        _this.loop(_this.props.currentStateIndex);
      }
    }, _this.loop = function (index) {
      var currentTimestamp = Date.now();
      var timestampDiff = _this.getLatestTimestampDiff(index);

      var aLoop = function aLoop() {
        var replayDiff = Date.now() - currentTimestamp;
        if (replayDiff >= timestampDiff) {
          _this.props.dispatch(jumpToState(_this.props.currentStateIndex + 1));

          if (_this.props.currentStateIndex >= _this.props.computedStates.length - 1) {
            _this.pauseReplay();
            return;
          }

          timestampDiff = _this.getLatestTimestampDiff(_this.props.currentStateIndex);
          currentTimestamp = Date.now();

          _this.setState({
            timer: requestAnimationFrame(aLoop)
          });
        } else {
          _this.setState({
            timer: requestAnimationFrame(aLoop)
          });
        }
      };

      if (index !== _this.props.computedStates.length - 1) {
        _this.setState({
          timer: requestAnimationFrame(aLoop)
        });
      }
    }, _this.getLatestTimestampDiff = function (index) {
      return _this.getTimestampOfStateIndex(index + 1) - _this.getTimestampOfStateIndex(index);
    }, _this.getTimestampOfStateIndex = function (stateIndex) {
      var id = _this.props.stagedActionIds[stateIndex];
      return _this.props.actionsById[id].timestamp;
    }, _this.pauseReplay = function (cb) {
      if (_this.state.timer) {
        cancelAnimationFrame(_this.state.timer);
        clearInterval(_this.state.timer);
        _this.setState({
          timer: undefined
        }, function () {
          if (typeof cb === 'function') {
            cb();
          }
        });
      }
    }, _this.stepLeft = function () {
      _this.pauseReplay();

      if (_this.props.currentStateIndex !== 0) {
        _this.props.dispatch(jumpToState(_this.props.currentStateIndex - 1));
      }
    }, _this.stepRight = function () {
      _this.pauseReplay();

      if (_this.props.currentStateIndex !== _this.props.computedStates.length - 1) {
        _this.props.dispatch(jumpToState(_this.props.currentStateIndex + 1));
      }
    }, _this.changeReplaySpeed = function (replaySpeed) {
      _this.setState({ replaySpeed: replaySpeed });

      if (_this.state.timer) {
        _this.pauseReplay(function () {
          if (replaySpeed === 'Live') {
            _this.startRealtimeReplay();
          } else {
            _this.startReplay();
          }
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SliderMonitor, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (typeof window !== 'undefined') {
        window.addEventListener('keydown', this.handleKeyPress);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (typeof window !== 'undefined') {
        window.removeEventListener('keydown', this.handleKeyPress);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          currentStateIndex = _props.currentStateIndex,
          computedStates = _props.computedStates,
          actionsById = _props.actionsById,
          stagedActionIds = _props.stagedActionIds,
          hideResetButton = _props.hideResetButton;
      var replaySpeed = this.state.replaySpeed;

      var theme = this.setUpTheme();

      var max = computedStates.length - 1;
      var actionId = stagedActionIds[currentStateIndex];
      var actionType = actionsById[actionId].action.type;
      if (actionType === undefined) actionType = '<UNDEFINED>';else if (actionType === null) actionType = '<NULL>';else actionType = actionType.toString() || '<EMPTY>';

      var onPlayClick = replaySpeed === 'Live' ? this.startRealtimeReplay : this.startReplay;
      var playPause = this.state.timer ? _react2.default.createElement(_SliderButton2.default, { theme: theme, type: 'pause', onClick: this.pauseReplay }) : _react2.default.createElement(_SliderButton2.default, { theme: theme, type: 'play', disabled: max <= 0, onClick: onPlayClick });

      return _react2.default.createElement(
        _devui.Toolbar,
        { noBorder: true, compact: true, fullHeight: true, theme: theme },
        playPause,
        _react2.default.createElement(_devui.Slider, {
          label: actionType,
          sublabel: '(' + actionId + ')',
          min: 0,
          max: max,
          value: currentStateIndex,
          onChange: this.handleSliderChange,
          theme: theme
        }),
        _react2.default.createElement(_SliderButton2.default, {
          theme: theme,
          type: 'stepLeft',
          disabled: currentStateIndex <= 0,
          onClick: this.stepLeft
        }),
        _react2.default.createElement(_SliderButton2.default, {
          theme: theme,
          type: 'stepRight',
          disabled: currentStateIndex === max,
          onClick: this.stepRight
        }),
        _react2.default.createElement(_devui.Divider, { theme: theme }),
        _react2.default.createElement(_devui.SegmentedControl, {
          theme: theme,
          values: ['Live', '1x', '2x'],
          selected: replaySpeed,
          onClick: this.changeReplaySpeed
        }),
        !hideResetButton && [_react2.default.createElement(_devui.Divider, { key: 'divider', theme: theme }), _react2.default.createElement(
          _devui.Button,
          { key: 'reset', theme: theme, onClick: this.handleReset },
          'Reset'
        )]
      );
    }
  }]);

  return SliderMonitor;
}(_react.PureComponent || _react.Component);

SliderMonitor.update = _reducers2.default;
SliderMonitor.propTypes = {
  dispatch: _propTypes2.default.func,
  computedStates: _propTypes2.default.array,
  stagedActionIds: _propTypes2.default.array,
  actionsById: _propTypes2.default.object,
  currentStateIndex: _propTypes2.default.number,
  monitorState: _propTypes2.default.shape({
    initialScrollTop: _propTypes2.default.number
  }),
  preserveScrollTop: _propTypes2.default.bool,
  stagedActions: _propTypes2.default.array,
  select: _propTypes2.default.func.isRequired,
  hideResetButton: _propTypes2.default.bool,
  theme: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),
  keyboardEnabled: _propTypes2.default.bool
};
SliderMonitor.defaultProps = {
  select: function select(state) {
    return state;
  },
  theme: 'nicinabox',
  preserveScrollTop: true,
  keyboardEnabled: true
};
exports.default = SliderMonitor;