{"version":3,"sources":["../../source/plugin/plugin.js"],"names":[],"mappings":"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","file":"plugin.js","sourcesContent":["import path from 'path'\r\n\r\nimport write_assets  from './write assets'\r\nimport notify_stats  from './notify stats'\r\n\r\nimport Log from './../tools/log'\r\n\r\nimport { exists, clone, convert_from_camel_case } from './../helpers'\r\n\r\nimport { default_webpack_assets, normalize_options } from './../common'\r\n\r\n// a Webpack plugin\r\nexport default function Plugin(options)\r\n{\r\n\t// take the passed in options\r\n\tthis.options = convert_from_camel_case(clone(options))\r\n\r\n\t// add missing fields, etc\r\n\tnormalize_options(this.options)\r\n\r\n\t// logging\r\n\tthis.log = new Log('webpack-isomorphic-tools/plugin', { debug: this.options.debug })\r\n\r\n\t// assets regular expressions (based on extensions).\r\n\t// will be used in loaders and in write_assets\r\n\tthis.regular_expressions = {}\r\n\r\n\t// alias camel case for those who prefer it\r\n\tthis.regularExpressions = this.regular_expressions\r\n\r\n\t// for each user defined asset type\r\n\tfor (let asset_type of Object.keys(this.options.assets))\r\n\t{\r\n\t\tconst description = this.options.assets[asset_type]\r\n\r\n\t\t// create a regular expression for this file extension (or these file extensions)\r\n\t\tthis.regular_expressions[asset_type] = Plugin.regular_expression(description.extensions)\r\n\t}\r\n}\r\n\r\n// creates a regular expression for this file extension (or these file extensions)\r\nPlugin.prototype.regular_expression = function(asset_type)\r\n{\r\n\tif (!exists(this.regular_expressions[asset_type]))\r\n\t{\r\n\t\tthrow new Error(`There's no asset type \"${asset_type}\" defined in webpack-isomorphic-tools configuration. Perhaps you didn't spell it correctly.`)\r\n\t}\r\n\r\n\treturn this.regular_expressions[asset_type]\r\n}\r\n\r\n// creates a regular expression for this file extension (or these file extensions)\r\nPlugin.regular_expression = function(extensions)\r\n{\r\n\tif (!Array.isArray(extensions))\r\n\t{\r\n\t\tthrow new Error(`You were expected to pass a list of extensions (an array). Instead got: ${extensions}. Maybe you were looking for the instance method istead of the class method of this plugin?`)\r\n\t}\r\n\r\n\tlet matcher\r\n\tif (extensions.length > 1)\r\n\t{\r\n\t\tmatcher = `(${extensions.join('|')})`\r\n\t}\r\n\telse\r\n\t{\r\n\t\tmatcher = extensions\r\n\t}\r\n\r\n\treturn new RegExp(`\\\\.${matcher}$`)\r\n}\r\n\r\n// sets development mode flag to whatever was passed (or true if nothing was passed)\r\n// (development mode allows asset hot reloading when used with webpack-dev-server)\r\nPlugin.prototype.development = function(flag)\r\n{\r\n\t// set development mode flag\r\n\tthis.options.development = exists(flag) ? flag : true\r\n\r\n\t/* istanbul ignore else */\r\n\tif (this.options.development)\r\n\t{\r\n\t\tthis.log.debug('entering development mode')\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthis.log.debug('entering production mode')\r\n\t}\r\n\r\n\t// allows method chaining\r\n\treturn this\r\n}\r\n\r\n// applies the plugin to the Webpack build\r\nPlugin.prototype.apply = function(compiler)\r\n{\r\n\t// Webpack configuration\r\n\tconst webpack_configuration = compiler.options\r\n\r\n\t// validate webpack configuration\r\n\tif (!webpack_configuration.context)\r\n\t{\r\n\t\tthrow new Error('You must specify \".context\" in your webpack configuration')\r\n\t}\r\n\r\n\t// project base path, required to output webpack-assets.json\r\n\tthis.options.project_path = webpack_configuration.context\r\n\r\n\t// resolve webpack-assets.json file path\r\n\tconst webpack_assets_path = path.resolve(this.options.project_path, this.options.webpack_assets_file_path)\r\n\r\n\t// resolve webpack-stats.json file path\r\n\tconst webpack_stats_path = path.resolve(this.options.project_path, this.options.webpack_stats_file_path)\r\n\r\n\t// validate webpack configuration\r\n\tif (!webpack_configuration.output)\r\n\t{\r\n\t\tthrow new Error('You must specify \".output\" section in your webpack configuration')\r\n\t}\r\n\t\r\n\t// validate webpack configuration\r\n\tif (!webpack_configuration.output.publicPath)\r\n\t{\r\n\t\tthrow new Error('You must specify \".output.publicPath\" in your webpack configuration')\r\n\t}\r\n\r\n\t// // assets base path (on disk or on the network)\r\n\t// const assets_base_path = webpack_configuration.output.publicPath\r\n\r\n\t// selfie\r\n\tconst plugin = this\r\n\r\n\t// when all is done\r\n\t// https://github.com/webpack/docs/wiki/plugins\r\n\tcompiler.plugin('done', function(stats)\r\n\t{\r\n\t\tplugin.log.debug('------------------- Started -------------------')\r\n\r\n\t\tvar json = stats.toJson()\r\n\r\n\t\t// output some info to the console if in development mode\r\n\t\tif (plugin.options.development)\r\n\t\t{\r\n\t\t\t// outputs stats info to the console\r\n\t\t\t// (only needed in development mode)\r\n\t\t\tnotify_stats(stats, json)\r\n\t\t}\r\n\r\n\t\t// write webpack-assets.json with assets info\r\n\t\twrite_assets(json,\r\n\t\t{ \r\n\t\t\tdevelopment         : plugin.options.development,\r\n\t\t\tdebug               : plugin.options.debug,\r\n\t\t\tassets              : plugin.options.assets,\r\n\t\t\talias               : plugin.options.alias,\r\n\t\t\tproject_path        : plugin.options.project_path,\r\n\t\t\tassets_base_url     : webpack_configuration.output.publicPath,\r\n\t\t\twebpack_assets_path : webpack_assets_path,\r\n\t\t\twebpack_stats_path  : webpack_stats_path,\r\n\t\t\toutput              : default_webpack_assets(),\r\n\t\t\tregular_expressions : plugin.regular_expressions\r\n\t\t},\r\n\t\tplugin.log)\r\n\r\n\t\tplugin.log.debug('------------------- Finished -------------------')\r\n\t})\r\n}\r\n\r\n// a sample module source parser for webpack url-loader\r\n// (works for images, fonts, and i guess for everything else, should work for any file type)\r\nPlugin.url_loader_parser = function(module, options, log)\r\n{\r\n\treturn module.source\r\n}\r\n\r\n// a sample module source parser for webpack css-loader\r\n// (without css-loader \"modules\" feature support)\r\nPlugin.css_loader_parser = function(module, options, log)\r\n{\r\n\treturn module.source + '\\n module.exports = module.exports.toString();'\r\n}\r\n\r\n// a sample module source parser for webpack css-loader\r\n// (with css-loader \"modules\" feature support)\r\nPlugin.css_modules_loader_parser = function(module, options, log)\r\n{\r\n\treturn module.source + '\\n module.exports = exports.locals || {}; module.exports._style = exports.toString();'\r\n}\r\n\r\n// a filter for getting a css module when using it with style-loader\r\n//\r\n// in development mode there's webpack \"style-loader\",\r\n// so the module with module.name equal to the asset path is not what's needed\r\n// (because what that module does is it creates a <style/> tag on the page).\r\n// the module with the CSS styles is the one with a long name:\r\nPlugin.style_loader_filter = function(module, regular_expression, options, log)\r\n{\r\n\treturn regular_expression.test(module.name) && module.name.indexOf('./~/css-loader') === 0\r\n}\r\n\r\n// extracts css style file path\r\nPlugin.style_loader_path_extractor = function(module, options, log)\r\n{\r\n\treturn module.name.slice(module.name.lastIndexOf('!') + 1)\r\n}\r\n\r\n// alias camel case for those who prefer it\r\nPlugin.urlLoaderParser        = Plugin.url_loader_parser\r\nPlugin.cssLoaderParser        = Plugin.css_loader_parser\r\nPlugin.cssModulesLoaderParser = Plugin.css_modules_loader_parser"]}